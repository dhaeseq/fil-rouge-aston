---

# BUILD PREPROD APP IMAGE WITH SOURCES AND PUSH DOCKERHUB
- name: Build preprod app image with sources and send it to DockerHub
  docker_image:
    build:
      path: /home/{{ ansible_ssh_user }}/Bureau/WorkSpace/fil-rouge-aston/application/bibliotheque-app
      args:
        maven_build_env: mvn -f pom.xml clean package -Ppreprod
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-app-preprod
    tag: latest
    push: yes
  when: inventory_hostname == "localhost"
  tags:
    - buildAndPushPreprodAppImageWithSources
    - freshInstallApplication

# BUILD PREPROD APP IMAGE FROM NEXUS AND PUSH DOCKERHUB
- name: Build preprod app image from nexus and send it to DockerHub
  docker_image:
    build:
      path: "{{ role_path }}/files/app"
      args:
        nexus_server: "{{ nexus_host }}"
        version: maven-snapshots
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-app-preprod
    tag: latest
    push: yes
  when: inventory_hostname in groups.jenkins
  tags:
    - buildAndPushPreprodAppNexusImage

# REMOVE PREPROD LOCAL IMAGE
- name: Remove preprod app local image
  docker_image:
    state: absent
    name:  dhaeseq/projet-fil-rouge-groupe2
    tag: bibliotheque-app-preprod
    force_absent: yes
  when: inventory_hostname != "prodfilrouge"
  tags:
    - buildAndPushPreprodAppNexusImage
    - buildAndPushPreprodAppImageWithSources
    - removePreprodLocalAppImage
    - freshInstallApplication

# BUILD PROD APP IMAGE WITH SOURCES AND PUSH DOCKERHUB
- name: Build prod app image with sources and send it to DockerHub
  docker_image:
    build:
      path: /home/{{ ansible_ssh_user }}/Bureau/WorkSpace/fil-rouge-aston/application/bibliotheque-app
      args:
        maven_build_env: mvn -f pom.xml clean package -Pprod -DskipTests
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-app-prod
    tag: latest
    push: yes
  when: inventory_hostname == "localhost"
  tags:
    - buildAndPushProdAppImageWithSources
    - freshInstallApplication

# BUILD PROD APP IMAGE FROM NEXUS AND PUSH DOCKERHUB
- name: Build prod app image from nexus and send it to DockerHub
  docker_image:
    build:
      path: "{{ role_path }}/files/app"
      args:
        nexus_server: "{{ nexus_host }}"
        version: maven-releases
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-app-prod
    tag: latest
    push: yes
  when: inventory_hostname in groups.jenkins
  tags:
    - buildAndPushProdAppNexusImage

# REMOVE PROD LOCAL IMAGE
- name: Remove prod app local image
  docker_image:
    state: absent
    name:  dhaeseq/projet-fil-rouge-groupe2
    tag: bibliotheque-app-prod
    force_absent: yes
  when: inventory_hostname != "devfilrouge"
  tags:
    - buildAndPushProdAppNexusImage
    - buildAndPushProdAppImageWithSources
    - removeProdLocalAppImage
    - freshInstallApplication

# BUILD PREPROD UI IMAGE WITH SOURCES AND PUSH DOCKERHUB
- name: Build preprod ui image with sources and send it to DockerHub
  docker_image:
    build:
      path: /home/{{ ansible_ssh_user }}/Bureau/WorkSpace/fil-rouge-aston/application/bibliotheque-ui
      args:
        angular_build_env: "node_modules/.bin/ng build --configuration=preproduction"
        env: preprod
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-ui-preprod
    tag: latest
    push: yes
  when: inventory_hostname == "localhost"
  tags:
    - buildAndPushPreprodUiImageWithSources
    - freshInstallApplication

# BUILD PREPROD UI IMAGE FROM NEXUS AND PUSH DOCKERHUB
- name: Build preprod ui image from nexus and send it to DockerHub
  docker_image:
    build:
      path: "{{ role_path }}/files/ui"
      args:
        nexus_server: "{{ nexus_host }}"
        version: maven-snapshots
        env: preprod
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-ui-preprod
    tag: latest
    push: yes
  when: inventory_hostname in groups.jenkins
  tags:
    - buildAndPushPreprodUiNexusImage

# REMOVE PREPROD LOCAL IMAGE
- name: Remove preprod ui local image
  docker_image:
    state: absent
    name:  dhaeseq/projet-fil-rouge-groupe2
    tag: bibliotheque-ui-preprod
    force_absent: yes
  when: inventory_hostname != "prodfilrouge"
  tags:
    - buildAndPushPreprodUiNexusImage
    - buildAndPushPreprodUiImageWithSources
    - removePreprodLocalUiImage
    - freshInstallApplication

# BUILD PROD UI IMAGE WITH SOURCES AND PUSH DOCKERHUB
- name: Build prod ui image with sources and send it to DockerHub
  docker_image:
    build:
      path: /home/{{ ansible_ssh_user }}/Bureau/WorkSpace/fil-rouge-aston/application/bibliotheque-ui
      args:
        angular_build_env: "node_modules/.bin/ng build --configuration=production"
        env: prod
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-ui-prod
    tag: latest
    push: yes
  when: inventory_hostname == "localhost"
  tags:
    - buildAndPushProdUiImageWithSources
    - freshInstallApplication

# BUILD PROD UI IMAGE FROM NEXUS AND PUSH DOCKERHUB
- name: Build prod ui image from nexus and send it to DockerHub
  docker_image:
    build:
      path: "{{ role_path }}/files/ui"
      args:
        nexus_server: "{{ nexus_host }}"
        version: maven-releases
        env: prod
    state: present
    source: build
    name: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-ui-prod
    tag: latest
    push: yes
  when: inventory_hostname in groups.jenkins
  tags:
    - buildAndPushProdUiNexusImage

# REMOVE PROD LOCAL IMAGE
- name: Remove prod ui local image
  docker_image:
    state: absent
    name:  dhaeseq/projet-fil-rouge-groupe2
    tag: bibliotheque-ui-prod
    force_absent: yes
  when: inventory_hostname != "devfilrouge"
  tags:
    - buildAndPushProdUiNexusImage
    - buildAndPushProdUiImageWithSources
    - removeProdLocalUiImage
    - freshInstallApplication

# RUN POSTGRES IMAGE
- name: Run postgres image
  docker_container:
    detach: yes
    image: postgres:13.2-alpine
    volumes:
      - bibliotheque-data:/var/lib/postgresql/data
    name: bibliotheque-postgres
    env:
      POSTGRES_DB: "bibliotheque"
      POSTGRES_USER: "groupe2ws"
      POSTGRES_PASSWORD: "{{ pg_password }}"
    published_ports:
      - 5432:5432
    restart_policy: always
  when: inventory_hostname in groups.filrougeservers
  tags:
    - runPostgresImage
    - freshInstallApplication

# RUN POSTGRES TEST IMAGE
- name: Run postgres test image
  docker_container:
    detach: yes
    image: postgres:13.2-alpine
    name: bibliotheque-postgres-tests
    env:
      POSTGRES_DB: "bibliotheque"
      POSTGRES_USER: "groupe2ws"
      POSTGRES_PASSWORD: "12345"
    published_ports:
      - 5433:5432
    restart_policy: always
  when: inventory_hostname == "devfilrouge"
  tags:
    - runPostgresTestImage
    - freshInstallApplication

# RUN APP IMAGE
- name: Run app image
  docker_container:
    detach: yes
    image: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-app-{{ env }}
    pull: yes
    recreate: yes
    name: bibliotheque-app
    env:
      SPRING_PROFILES_ACTIVE: "{{ env }}"
      SPRING_DATASOURCE_PASSWORD: "{{ pg_password }}"
    published_ports:
      - 8080:8443
    restart_policy: always
  when: inventory_hostname in groups.filrougeservers
  tags:
    - runAppImage
    - freshInstallApplication

# RUN UI IMAGE
- name: Run ui image
  docker_container:
    detach: yes
    image: dhaeseq/projet-fil-rouge-groupe2:bibliotheque-ui-{{ env }}
    pull: yes
    recreate: yes
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    name: bibliotheque-ui
    published_ports:
      - 80:80
      - 443:443
    restart_policy: always
  when: inventory_hostname in groups.filrougeservers
  tags:
    - runUiImage
    - freshInstallApplication

# PRUNE IMAGES
- name: Prune docker images
  docker_prune:
    images: yes
  tags:
    - pruneImages
    - freshInstallApplication
